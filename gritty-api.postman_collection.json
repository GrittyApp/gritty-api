{
  "info": {
    "name": "Gritty App Mobile API v1",
    "description": "Complete REST API collection for the Gritty App mobile application, providing mental fortitude training for young athletes (11-18).\n\n## Authentication\nThe API uses JWT (JSON Web Token) authentication. Set the `{{token}}` variable after login.\n\n## Environment Variables\n- `{{base_url}}`: API base URL (e.g., https://api.grittyapp.com/api/v1)\n- `{{token}}`: JWT authentication token\n- `{{user_id}}`: Current user ID\n- `{{training_id}}`: Sample training ID\n- `{{assessment_id}}`: Sample assessment ID",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "gritty-api-v1",
    "version": {
      "major": 1,
      "minor": 1,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set common headers",
          "pm.request.headers.add({",
          "  key: 'Content-Type',",
          "  value: 'application/json'",
          "});",
          "",
          "// Log request for debugging",
          "console.log('Request URL:', pm.request.url.toString());",
          "console.log('Request Method:', pm.request.method);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common response validation",
          "pm.test('Response time is less than 5000ms', function () {",
          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "  pm.response.to.have.jsonBody();",
          "});",
          "",
          "// Log response for debugging",
          "console.log('Response Status:', pm.response.status);",
          "console.log('Response Body:', pm.response.text());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api/v1",
      "type": "string",
      "description": "API base URL"
    },
    {
      "key": "token",
      "value": "",
      "type": "string",
      "description": "JWT authentication token"
    },
    {
      "key": "user_id",
      "value": "1",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "training_id",
      "value": "1",
      "type": "string",
      "description": "Sample training ID"
    },
    {
      "key": "assessment_id",
      "value": "1",
      "type": "string",
      "description": "Sample assessment ID"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check API health status and service availability"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200 or 503', function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200, 503]);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('status');",
                  "  pm.expect(jsonData.status).to.be.oneOf(['healthy', 'unhealthy']);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"password_confirmation\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.expect(pm.response.code).to.eql(201);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('success');",
                  "  pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('user');",
                  "  pm.expect(jsonData.data.user).to.have.property('id');",
                  "  pm.expect(jsonData.data.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate user and receive JWT token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('token');",
                  "  pm.expect(jsonData.data.token).to.be.a('string');",
                  "  ",
                  "  // Set token for subsequent requests",
                  "  pm.collectionVariables.set('token', jsonData.data.token);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('user');",
                  "  pm.expect(jsonData.data.user).to.have.property('id');",
                  "  ",
                  "  // Set user_id for subsequent requests",
                  "  pm.collectionVariables.set('user_id', jsonData.data.user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current authenticated user information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('user');",
                  "  pm.expect(jsonData.data.user).to.have.property('id');",
                  "  pm.expect(jsonData.data.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user (client-side token removal)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response indicates success', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('success');",
                  "  pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "profile"]
            },
            "description": "Get detailed user profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('id');",
                  "  pm.expect(jsonData.data).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"sport_primary\": \"Basketball\",\n  \"age\": 16\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "profile"]
            },
            "description": "Update user profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('success');",
                  "  pm.expect(jsonData.success).to.eql(true);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/stats",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "stats"]
            },
            "description": "Get user training and assessment statistics"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has stats data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('training_stats');",
                  "  pm.expect(jsonData.data).to.have.property('assessment_stats');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Trainings",
      "item": [
        {
          "name": "Get Trainings List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/trainings?page=1&per_page=10",
              "host": ["{{base_url}}"],
              "path": ["trainings"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                },
                {
                  "key": "type",
                  "value": "Foundation",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                }
              ]
            },
            "description": "Get list of available trainings with filtering and pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has trainings array', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('trainings');",
                  "  pm.expect(jsonData.data.trainings).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('pagination');",
                  "  pm.expect(jsonData.data.pagination).to.have.property('current_page');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Training by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/trainings/{{training_id}}",
              "host": ["{{base_url}}"],
              "path": ["trainings", "{{training_id}}"]
            },
            "description": "Get detailed training information including user progress"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Response has training data', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData.data).to.have.property('training');",
                  "  pm.expect(jsonData.data.training).to.have.property('id');",
                  "  pm.expect(jsonData.data.training).to.have.property('name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Start Training",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/trainings/{{training_id}}/start",
              "host": ["{{base_url}}"],
              "path": ["trainings", "{{training_id}}", "start"]
            },
            "description": "Start a training session for the user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.expect(pm.response.code).to.eql(201);",
                  "});",
                  "",
                  "pm.test('Training started successfully', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('success');",
                  "  pm.expect(jsonData.success).to.eql(true);",
                  "  pm.expect(jsonData.data).to.have.property('user_training');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Complete Training",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"score\": 85,\n  \"notes\": \"Great training session!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/trainings/{{training_id}}/complete",
              "host": ["{{base_url}}"],
              "path": ["trainings", "{{training_id}}", "complete"]
            },
            "description": "Mark a training as completed for the user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "pm.test('Training completed successfully', function () {",
                  "  const jsonData = pm.response.json();",
                  "  pm.expect(jsonData).to.have.property('success');",
                  "  pm.expect(jsonData.success).to.eql(true);",
                  "  pm.expect(jsonData.data).to.have.property('user_training');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
